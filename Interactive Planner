#include <SFML/Graphics.hpp>
#include <iostream>
#include <map>
#include <vector>
#include <string>

// Data structure to store tasks for each day
std::map<std::string, std::vector<std::string>> tasks;
std::string days[] = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};
sf::Color dayColors[] = {
    sf::Color(255, 99, 71),    // Red for Monday
    sf::Color(60, 179, 113),   // Green for Tuesday
    sf::Color(100, 149, 237),  // Blue for Wednesday
    sf::Color(255, 165, 0),    // Orange for Thursday
    sf::Color(255, 255, 0),    // Yellow for Friday
    sf::Color(138, 43, 226),   // Blueviolet for Saturday
    sf::Color(255, 105, 180)   // HotPink for Sunday
};

int main() {
    sf::RenderWindow window(sf::VideoMode(850, 500), "Interactive Weekly Planner");

    // Background color
    sf::Color backgroundColor(211, 211, 211);

    // Load font
    sf::Font font;
    if (!font.loadFromFile("/System/Library/Fonts/Supplemental/Arial.ttf")) {
        std::cerr << "Error: Failed to load font.\n";
        return -1;
    }

    // Input box and entered text
    sf::RectangleShape inputBox(sf::Vector2f(400.f, 50.f));
    inputBox.setFillColor(sf::Color::White);
    inputBox.setPosition(225.f, 420.f);

    sf::Text inputText("", font, 20);
    inputText.setFillColor(sf::Color::Black);
    inputText.setPosition(230.f, 430.f);

    std::string userInput;
    bool isInputActive = false;

    // Instruction text
    sf::Text instructionText("Click a day to select. Type a task below:", font, 18);
    instructionText.setFillColor(sf::Color::Black);
    instructionText.setPosition(20.f, 380.f);

    // Task display text
    sf::Text taskText("", font, 16);
    taskText.setFillColor(sf::Color::Black);
    taskText.setPosition(20.f, 100.f);

    // Selected day
    std::string selectedDay = "Monday";

    // Create day boxes
    sf::RectangleShape dayBox(sf::Vector2f(105.f, 65.f));

    // Main loop
    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();

            // Handle text input
            if (event.type == sf::Event::TextEntered && isInputActive) {
                if (event.text.unicode == '\b' && !userInput.empty()) { // Handle backspace
                    userInput.pop_back();
                } else if (event.text.unicode < 128 && event.text.unicode != '\b') {
                    userInput += static_cast<char>(event.text.unicode);
                }
                inputText.setString(userInput);
            }

            // Activate input box on click
            if (event.type == sf::Event::MouseButtonPressed) {
                sf::Vector2i mousePos = sf::Mouse::getPosition(window);
                if (inputBox.getGlobalBounds().contains(mousePos.x, mousePos.y)) {
                    isInputActive = true;
                } else {
                    isInputActive = false;

                    // Check if a day box is clicked
                    for (int i = 0; i < 7; ++i) {
                        float x = 10.f + i * 115.f;
                        float y = 10.f;
                        if (mousePos.x >= x && mousePos.x <= x + 105.f &&
                            mousePos.y >= y && mousePos.y <= y + 65.f) {
                            selectedDay = days[i];
                            std::cout << "Selected day: " << selectedDay << std::endl;
                        }
                    }
                }
            }

            // Submit task on Enter
            if (event.type == sf::Event::KeyPressed && event.key.code == sf::Keyboard::Enter) {
                if (!userInput.empty()) {
                    tasks[selectedDay].push_back(userInput);
                    std::cout << "Task added to " << selectedDay << ": " << userInput << std::endl;
                    userInput.clear();
                    inputText.setString(userInput);
                }
            }
        }

        // Clear and draw UI elements
        window.clear(backgroundColor);

        // Instruction and input box
        window.draw(instructionText);
        window.draw(inputBox);
        window.draw(inputText);

        // Draw day boxes and labels
        for (int i = 0; i < 7; ++i) {
            dayBox.setFillColor(dayColors[i]);
            dayBox.setPosition(10.f + i * 115.f, 10.f);
            window.draw(dayBox);

            // Day name text
            sf::Text dayText(days[i], font, 18);
            dayText.setFillColor(sf::Color::Black);
            dayText.setPosition(10.f + i * 115.f + 10.f, 20.f);
            window.draw(dayText);

            // Highlight selected day
            if (selectedDay == days[i]) {
                sf::RectangleShape highlightBox(sf::Vector2f(105.f, 65.f));
                highlightBox.setFillColor(sf::Color::Transparent);
                highlightBox.setOutlineThickness(3.f);
                highlightBox.setOutlineColor(sf::Color::Black);
                highlightBox.setPosition(10.f + i * 115.f, 10.f);
                window.draw(highlightBox);
            }
        }

        // Display tasks for selected day
        if (!tasks[selectedDay].empty()) {
            std::string taskList = selectedDay + " Tasks:\n";
            for (const auto& task : tasks[selectedDay]) {
                taskList += "- " + task + "\n";
            }
            taskText.setString(taskList);
        } else {
            taskText.setString("No tasks for " + selectedDay);
        }
        window.draw(taskText);

        window.display();
    }

    return 0;
}
